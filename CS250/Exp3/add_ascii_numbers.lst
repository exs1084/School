   1 0000               # File:		add_ascii_numbers.asm
   2 0000               # Author:	K. Reek
   3 0000               # Contributors:	P. White, W. Carithers
   4 0000               #		<<Erikson Sodergren>>
   5 0000               #
   6 0000               # Updates:
   7 0000               #		3/2004	M. Reek, named constants
   8 0000               #		10/2007 W. Carithers, alignment
   9 0000               #		09/2009 W. Carithers, separate assembly
  10 0000               #
  11 0000               # Description:	Add two ASCII numbers and store the result in ASCII.
  12 0000               #
  13 0000               # Arguments:	a0: address of parameter block.  The block consists of
  14 0000               #		four words that contain (in this order):
  15 0000               #
  16 0000               #			address of first input string
  17 0000               #			address of second input string
  18 0000               #			address where result should be stored
  19 0000               #			length of the strings and result buffer
  20 0000               #
  21 0000               #		(There is actually other data after this in the
  22 0000               #		parameter block, but it is not relevant to this routine.)
  23 0000               #
  24 0000               # Returns:	The result of the addition, in the buffer specified by
  25 0000               #		the parameter block.
  26 0000               #
  27 0000               
  28 0000               	.globl	add_ascii_numbers
  29 0000               
  30 0000               add_ascii_numbers:
  31 0000               A_FRAMESIZE = 40
  32 0000               
  33 0000               #
  34 0000               # Save registers ra and s0 - s7 on the stack.
  35 0000               #
  36 0000 23BDFFD8		addi 	$sp, $sp, -A_FRAMESIZE
  37 0004 AFBF0024		sw 	$ra, -4+A_FRAMESIZE($sp)
  38 0008 AFB7001C		sw 	$s7, 28($sp)
  39 000c AFB60018		sw 	$s6, 24($sp)
  40 0010 AFB50014		sw 	$s5, 20($sp)
  41 0014 AFB40010		sw 	$s4, 16($sp)
  42 0018 AFB3000C		sw 	$s3, 12($sp)
  43 001c AFB20008		sw 	$s2, 8($sp)
  44 0020 AFB10004		sw 	$s1, 4($sp)
  45 0024 AFB00000		sw 	$s0, 0($sp)
  46 0028               	
  47 0028               # ##### BEGIN STUDENT CODE BLOCK 1 #####
  48 0028 8C910000		lw	$s1, 0($a0)	#add1 in s1
  49 002c 8C920004		lw	$s2, 4($a0)	#add2 in s2
  50 0030 8C900008		lw	$s0, 8($a0)	#ret string add in s0
  51 0034 8C93000C		lw	$s3, 12($a0)	#length in s3
  52 0038 00134020		add	$t0, $zero, $s3	#set countdown
  53 003c 2109FFFF		addi	$t1, $t0, -1
  54 0040 02098020		add	$s0, $t1
  55 0044 02298820		add	$s1, $t1
  56 0048 02499020		add	$s2, $t1	#set addr to last chars
  57 004c 00006021		move	$t4, $zero	#init carry
  58 0050 21AD0001		addi	$t5, $t5, 1	#change carry indicator
  59 0054               loop:
  60 0054 11000011		beq	$t0, $zero, done#done if countdown=0
  61 0058 82290000		lb	$t1, 0($s1)
  62 005c 824A0000		lb	$t2, 0($s2)	#load digits to add
  63 0060 012A5820		add	$t3, $t1, $t2	#add
  64 0064 216BFFD0		addi	$t3, $t3, -48	#account for ascii math
  65 0068 15A00002		bne	$t5, $zero, no_prev_car#t5=0 means carried
  66 006c 216B0001		addi	$t3, $t3, 1	#add previous carry
  67 0070 21AD0001		addi	$t5, $t5, 1	#change carry indicator
  68 0074               no_prev_car:
  69 0074 216CFFC7		addi	$t4, $t3, -57	#find if carry
  70 0078 298D0001		slti	$t5, $t4, 1	#if not, t5=1
  71 007c 15A00001		bne	$t5, $zero, no_curr_car
  72 0080 216BFFF6		addi	$t3, $t3, -10	#sub 10 cuz carry
  73 0084               no_curr_car:
  74 0084 A20B0000		sb	$t3, 0($s0)	#store sum
  75 0088 2108FFFF		addi	$t0, $t0, -1
  76 008c 2210FFFF		addi	$s0, $s0, -1
  77 0090 2231FFFF		addi	$s1, $s1, -1
  78 0094 2252FFFF		addi	$s2, $s2, -1
  79 0098 08000015		j	loop
  80 009c               done:
  81 009c               # ###### END STUDENT CODE BLOCK 1 ######
  82 009c               
  83 009c               #
  84 009c               # Restore registers ra and s0 - s7 from the stack.
  85 009c               #
  86 009c 8FBF0024		lw 	$ra, -4+A_FRAMESIZE($sp)
  87 00a0 8FB7001C		lw 	$s7, 28($sp)
  88 00a4 8FB60018		lw 	$s6, 24($sp)
  89 00a8 8FB50014		lw 	$s5, 20($sp)
  90 00ac 8FB40010		lw 	$s4, 16($sp)
  91 00b0 8FB3000C		lw 	$s3, 12($sp)
  92 00b4 8FB20008		lw 	$s2, 8($sp)
  93 00b8 8FB10004		lw 	$s1, 4($sp)
  94 00bc 8FB00000		lw 	$s0, 0($sp)
  95 00c0 23BD0028		addi 	$sp, $sp, A_FRAMESIZE
  96 00c4               
  97 00c4 03E00008		jr	$ra			# Return to the caller.


A_FRAMESIZE        = 00000028   
add_ascii_numbers    00000000 RG text 
done                 0000009C R  text 
loop                 00000054 R  text 
no_curr_car          00000084 R  text 
no_prev_car          00000074 R  text 
