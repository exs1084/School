   1 0000               # FILE:         $File$
   2 0000               # AUTHOR:       P. White
   3 0000               # CONTRIBUTORS: M. Reek, W. Carithers
   4 0000               # 		<<<Erikson Sodergren>>>
   5 0000               #
   6 0000               # DESCRIPTION:
   7 0000               #	In this experiment, you will write some code in a pair of 
   8 0000               #	functions that are used to simplify a fraction.
   9 0000               #
  10 0000               # ARGUMENTS:
  11 0000               #       None
  12 0000               #
  13 0000               # INPUT:
  14 0000               #	The numerator and denominator of a fraction
  15 0000               #
  16 0000               # OUTPUT:
  17 0000               #	The fraction in simplified form (ie 210/50 would be simplified
  18 0000               #	to "4 and 1/5")
  19 0000               #
  20 0000               # REVISION HISTORY:
  21 0000               #       Dec  13, 04         - P. White, created program
  22 0000               #
  23 0000               
  24 0000               #
  25 0000               # CONSTANT DECLARATIONS
  26 0000               #
  27 0000               PRINT_INT	= 1		# code for syscall to print integer
  28 0000               PRINT_STRING	= 4		# code for syscall to print a string
  29 0000               READ_INT	= 5		# code for syscall to read an int
  30 0000               
  31 0000               #
  32 0000               # DATA DECLARATIONS
  33 0000               #
  34 0000               	.data
  35 0000               into_msg:
  36 0000 0A2A2A2A		.ascii  "\n*************************\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
  37 001b 2A2A2046		.ascii	  "** Fraction Simplifier **\n"
          72616374
          696F6E20
          53696D70
          6C696669
          6572202A
  38 0035 2A2A2A2A		.asciiz   "*************************\n\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
  39 0051               newline:
  40 0051 0A00    		.asciiz "\n"
  41 0053               input_error:
  42 0053 0A457272		.asciiz "\nError with previous input, try again.\n"
          6F722077
          69746820
          70726576
          696F7573
          20696E70
  43 007b               num_string:
  44 007b 0A456E74		.asciiz "\nEnter the Numerator of the fraction: "
          65722074
          6865204E
          756D6572
          61746F72
          206F6620
  45 00a2               den_string:
  46 00a2 0A456E74		.asciiz "\nEnter the Denominator of the fraction: "
          65722074
          68652044
          656E6F6D
          696E6174
          6F72206F
  47 00cb               res_string:
  48 00cb 0A546865		.asciiz "\nThe simplified fraction is: "
          2073696D
          706C6966
          69656420
          66726163
          74696F6E
  49 00e9               and_string:
  50 00e9 20616E64		.asciiz " and "
          2000    
  51 00ef               div_string:
  52 00ef 2F00    		.asciiz "/"
  53 00f1               #
  54 00f1               # MAIN PROGRAM
  55 00f1               #
  56 0000               	.text
  57 0000               	.align	2
  58 0000               	.globl	main
  59 0000               main:
  60 0000 23BDFFF0	        addi    $sp, $sp, -16  	# space for return address/doubleword aligned
  61 0004 AFBF000C	        sw      $ra, 12($sp)    # store the ra on the stack
  62 0008 AFB20008	        sw      $s2, 8($sp)
  63 000c AFB10004	        sw      $s1, 4($sp)
  64 0010 AFB00000	        sw      $s0, 0($sp)
  65 0014               
  66 0014 3C040000		la	$a0, into_msg
     0018 34840000
  67 001c 0C00008D	        jal	print_string
  68 0020               
  69 0020               ask_for_num:
  70 0020 3C040000		la	$a0, num_string
     0024 34840000
  71 0028 0C00008D	        jal	print_string
  72 002c               
  73 002c 34020005		la	$v0, READ_INT
  74 0030 0000000C		syscall
  75 0034 00408021		move	$s0, $v0	# s0 will be the numerator
  76 0038               
  77 0038 28480000		slti    $t0, $v0, 0
  78 003c 11000004		beq	$t0, $zero, ask_for_den
  79 0040               
  80 0040 3C040000	        la      $a0, input_error
     0044 34840000
  81 0048 0C00008D		jal     print_string
  82 004c               
  83 004c 08000008		j	ask_for_num
  84 0050               
  85 0050               ask_for_den:
  86 0050 3C040000		la	$a0, den_string
     0054 34840000
  87 0058 0C00008D		jal	print_string
  88 005c               
  89 005c 34020005		la	$v0, READ_INT
  90 0060 0000000C		syscall
  91 0064 00402821		move	$a1, $v0	# a1 will be the denominator
  92 0068               
  93 0068 28480001		slti	$t0, $v0, 1
  94 006c 11000004		beq	$t0, $zero, den_good
  95 0070               
  96 0070 3C040000	        la      $a0, input_error
     0074 34840000
  97 0078 0C00008D		jal	print_string
  98 007c               
  99 007c 08000014		j	ask_for_den
 100 0080               
 101 0080               den_good:
 102 0080 02002021		move	$a0, $s0	# copy the numerator into a0
 103 0084 0C000040		jal	simplify
 104 0088               
 105 0088 00408021		move	$s0, $v0	# save the numerator
 106 008c 00608821		move	$s1, $v1	# save the denominator
 107 0090 03209021		move	$s2, $t9	# save the integer part
 108 0094               	
 109 0094 3C040000	        la      $a0, res_string
     0098 34840000
 110 009c 0C00008D		jal	print_string
 111 00a0               
 112 00a0 02402021		move	$a0, $s2
 113 00a4 34020001		li	$v0, PRINT_INT
 114 00a8 0000000C		syscall
 115 00ac               
 116 00ac 3C040000	        la      $a0, and_string
     00b0 34840000
 117 00b4 0C00008D		jal	print_string
 118 00b8               
 119 00b8 02002021	        move    $a0, $s0
 120 00bc 34020001		li	$v0, PRINT_INT
 121 00c0 0000000C		syscall
 122 00c4               
 123 00c4 3C040000	        la      $a0, div_string
     00c8 34840000
 124 00cc 0C00008D		jal	print_string
 125 00d0               
 126 00d0 02202021	        move    $a0, $s1
 127 00d4 34020001		li	$v0, PRINT_INT
 128 00d8 0000000C		syscall
 129 00dc               
 130 00dc 3C040000	        la      $a0, newline
     00e0 34840000
 131 00e4 0C00008D		jal	print_string
 132 00e8               
 133 00e8                       #
 134 00e8                       # Now exit the program.
 135 00e8               	#
 136 00e8 8FBF000C	        lw      $ra, 12($sp)	# clean up stack
 137 00ec 8FB20008	        lw      $s2, 8($sp)
 138 00f0 8FB10004	        lw      $s1, 4($sp)
 139 00f4 8FB00000	        lw      $s0, 0($sp)
 140 00f8 23BD0010	        addi    $sp, $sp, 16
 141 00fc 03E00008	        jr      $ra
 142 0100               
 143 0100               #
 144 0100               # Name:		simplify 
 145 0100               #
 146 0100               # Description:	Simplify a fraction.
 147 0100               #
 148 0100               # Arguments:	a0:	the original numerator
 149 0100               #		a1:	the original denominator
 150 0100               # Returns:	v0:	the simplified numerator
 151 0100               #		v1:	the simplified denominator
 152 0100               #		t9:	the simplified integer part
 153 0100               #
 154 0100               #######################################################################
 155 0100               # 		NOTE: 	this function uses a non-standard return register
 156 0100               #			t9 will contain the integer part of the
 157 0100               #			simplified fraction
 158 0100               #######################################################################
 159 0100               #
 160 0100               #
 161 0100               
 162 0100               simplify:
 163 0100 23BDFFD8	        addi    $sp, $sp, -40	# allocate stack frame (on doubleword boundary)
 164 0104 AFBF0020	        sw      $ra, 32($sp)    # store the ra & s reg's on the stack
 165 0108 AFB7001C	        sw      $s7, 28($sp)
 166 010c AFB60018	        sw      $s6, 24($sp)
 167 0110 AFB50014	        sw      $s5, 20($sp)
 168 0114 AFB40010	        sw      $s4, 16($sp)
 169 0118 AFB3000C	        sw      $s3, 12($sp)
 170 011c AFB20008	        sw      $s2, 8($sp)
 171 0120 AFB10004	        sw      $s1, 4($sp)
 172 0124 AFB00000	        sw      $s0, 0($sp)
 173 0128               	
 174 0128               # ######################################
 175 0128               # ##### BEGIN STUDENT CODE BLOCK 1 #####
 176 0128 00808021		move	$s0, $a0	#copy args into s reg
 177 012c 00A08821		move	$s1, $a1
 178 0130 0C000065		jal	find_gcd	#find gcd
 179 0134 00409021		move	$s2, $v0	#store gcd
 180 0138 0000C821		move	$t9, $zero
 181 013c 0212001A		div	$s0, $s0, $s2
     0140 00008012
 182 0144 0232001A		div	$s1, $s1, $s2	#divide by gcd
     0148 00008812
 183 014c               simp_loop:
 184 014c 0211482A		slt	$t1, $s0, $s1	#if num<denom, t1=1
 185 0150 15200003		bne	$t1, $zero, simp_ret
 186 0154 23390001		addi	$t9, $t9, 1	#increment integer
 187 0158 02118022		sub	$s0, $s0, $s1	#reduce numer
 188 015c 08000053		j 	simp_loop
 189 0160               simp_ret:
 190 0160 02001021		move	$v0, $s0
 191 0164 02201821		move	$v1, $s1
 192 0168               # ###### END STUDENT CODE BLOCK 1 ######
 193 0168               # ######################################
 194 0168               
 195 0168               simplify_done:
 196 0168 8FBF0020	        lw      $ra, 32($sp)    # restore the ra & s reg's from the stack
 197 016c 8FB7001C	        lw      $s7, 28($sp)
 198 0170 8FB60018	        lw      $s6, 24($sp)
 199 0174 8FB50014	        lw      $s5, 20($sp)
 200 0178 8FB40010	        lw      $s4, 16($sp)
 201 017c 8FB3000C	        lw      $s3, 12($sp)
 202 0180 8FB20008	        lw      $s2, 8($sp)
 203 0184 8FB10004	        lw      $s1, 4($sp)
 204 0188 8FB00000	        lw      $s0, 0($sp)
 205 018c 23BD0028	        addi    $sp, $sp, 40      # clean up stack
 206 0190 03E00008		jr	$ra
 207 0194               
 208 0194               #
 209 0194               # Name:		find_gcd 
 210 0194               #
 211 0194               # Description:	computes the GCD of the two inputed numbers
 212 0194               # Arguments:  	a0	The first number
 213 0194               #		a1	The second number
 214 0194               # Returns: 	v0	The GCD of a0 and a1.
 215 0194               #
 216 0194               
 217 0194               find_gcd:
 218 0194 23BDFFD8	        addi	$sp, $sp, -40	# allocate stackframe (doubleword aligned)
 219 0198 AFBF0020	        sw      $ra, 32($sp)    # store the ra & s reg's on the stack
 220 019c AFB7001C	        sw      $s7, 28($sp)
 221 01a0 AFB60018	        sw      $s6, 24($sp)
 222 01a4 AFB50014	        sw      $s5, 20($sp)
 223 01a8 AFB40010	        sw      $s4, 16($sp)
 224 01ac AFB3000C	        sw      $s3, 12($sp)
 225 01b0 AFB20008	        sw      $s2, 8($sp)
 226 01b4 AFB10004	        sw      $s1, 4($sp)
 227 01b8 AFB00000	        sw      $s0, 0($sp)
 228 01bc               
 229 01bc               # ######################################
 230 01bc               # ##### BEGIN STUDENT CODE BLOCK 2 #####
 231 01bc               while_gcd:
 232 01bc 1085000A		beq	$a0, $a1, gcd_ret	#while num1!=num2
 233 01c0 00854822		sub	$t1, $a0, $a1		#D=num1-num2
 234 01c4 0120502A		slt	$t2, $t1, $zero		#is D<0?
 235 01c8 11400001		beq	$t2, $zero, D_pos	#if no, continue
 236 01cc 00094822		sub	$t1, $zero, $t1		#if yes, change that
 237 01d0               D_pos:
 238 01d0 00A4502A		slt	$t2, $a1, $a0		#num2<num1?
 239 01d4 11400002		beq	$t2, $zero, set_num2	#if not change num2
 240 01d8 01202021		move	$a0, $t1		#num1=D
 241 01dc 0800006F		j	while_gcd
 242 01e0               set_num2:
 243 01e0 01202821		move	$a1, $t1		#num2=D
 244 01e4 0800006F		j	while_gcd
 245 01e8               gcd_ret:
 246 01e8 00801021		move 	$v0, $a0		#set return value
 247 01ec               # ###### END STUDENT CODE BLOCK 2 ######
 248 01ec               # ######################################
 249 01ec               
 250 01ec               find_gcd_done:
 251 01ec 8FBF0020	        lw      $ra, 32($sp)    # restore the ra & s reg's from the stack
 252 01f0 8FB7001C	        lw      $s7, 28($sp)
 253 01f4 8FB60018	        lw      $s6, 24($sp)
 254 01f8 8FB50014	        lw      $s5, 20($sp)
 255 01fc 8FB40010	        lw      $s4, 16($sp)
 256 0200 8FB3000C	        lw      $s3, 12($sp)
 257 0204 8FB20008	        lw      $s2, 8($sp)
 258 0208 8FB10004	        lw      $s1, 4($sp)
 259 020c 8FB00000	        lw      $s0, 0($sp)
 260 0210 23BD0028	        addi    $sp, $sp, 40      # clean up the stack
 261 0214 03E00008		jr	$ra
 262 0218               
 263 0218               #
 264 0218               # Name;		print_number 
 265 0218               #
 266 0218               # Description:	This routine reads a number then a newline to stdout
 267 0218               # Arguments:	a0:  the number to print
 268 0218               # Returns:	nothing
 269 0218               #
 270 0218               print_number:
 271 0218               
 272 0218 34020001	        li 	$v0, PRINT_INT
 273 021c 0000000C	        syscall			#print a0
 274 0220               
 275 0220 3C040000	        la	$a0, newline
     0224 34840000
 276 0228 34020004	        li      $v0, PRINT_STRING
 277 022c 0000000C	        syscall			#print a newline
 278 0230               
 279 0230 03E00008	        jr      $ra
 280 0234               
 281 0234               #
 282 0234               # Name;		print_string 
 283 0234               #
 284 0234               # Description:	This routine prints out a string pointed to by a0
 285 0234               # Arguments:	a0:  a pointer to the string to print
 286 0234               # Returns:	nothing
 287 0234               #
 288 0234               print_string:
 289 0234               
 290 0234 34020004	        li 	$v0, PRINT_STRING
 291 0238 0000000C	        syscall			#print a0
 292 023c               
 293 023c 03E00008	        jr      $ra


D_pos            000001D0 R  text 
PRINT_INT      = 00000001   
PRINT_STRING   = 00000004   
READ_INT       = 00000005   
and_string       000000E9 R  data 
ask_for_den      00000050 R  text 
ask_for_num      00000020 R  text 
den_good         00000080 R  text 
den_string       000000A2 R  data 
div_string       000000EF R  data 
find_gcd         00000194 R  text 
find_gcd_done    000001EC R  text 
gcd_ret          000001E8 R  text 
input_error      00000053 R  data 
into_msg         00000000 R  data 
main             00000000 RG text 
newline          00000051 R  data 
num_string       0000007B R  data 
print_number     00000218 R  text 
print_string     00000234 R  text 
res_string       000000CB R  data 
set_num2         000001E0 R  text 
simp_loop        0000014C R  text 
simp_ret         00000160 R  text 
simplify         00000100 R  text 
simplify_done    00000168 R  text 
while_gcd        000001BC R  text 
